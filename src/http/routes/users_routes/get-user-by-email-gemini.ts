// src/http/routes/users/get-user-by-email-gemini.ts
import type { FastifyPluginCallbackZod } from "fastify-type-provider-zod";
import z from "zod";
import { eq } from "drizzle-orm";
import { authMiddleware } from "../../../middlewares/auth-middleware.ts";
import { db } from "../../../db/connection.ts";
import { schema } from "../../../db/schema/index.ts";
import {
  describeUserWithGemini,
  validateEmailWithGemini,
} from "../../../services/gemini.ts";

export const getUserByEmailGeminiRoute: FastifyPluginCallbackZod = (app) => {
  app.post(
    "/api/users/gemini",
    {
      preHandler: [authMiddleware],
      schema: {
        tags: ["Users"],
        summary: "Get user by email via Gemini",
        description:
          "Receives an email, validates with Gemini and returns the user from the database + description generated by Gemini.",
        body: z.object({
          email: z.email(),
        }),
        response: {
          200: z.object({
            message: z.string(),
            user: z.object({
              id: z.uuid(),
              name: z.string(),
              email: z.email(),
              role: z.string(),
              created_at: z.date(),
              updated_at: z.date().nullable(),
            }),
          }),
          400: z.object({ message: z.string() }),
          404: z.object({ message: z.string().default("User not found") }),
          500: z.object({
            message: z.string().default("Internal server error"),
          }),
        },
      },
    },
    async (request, reply) => {
      const { email } = request.body;

      try {
        const geminiEmail = await validateEmailWithGemini(email);

        if (geminiEmail === "invalid") {
          return reply.status(400).send({ message: "Invalid email" });
        }

        const result = await db
          .select({
            id: schema.users.id,
            name: schema.users.name,
            email: schema.users.email,
            role: schema.users.role,
            created_at: schema.users.created_at,
            updated_at: schema.users.updated_at,
          })
          .from(schema.users)
          .where(eq(schema.users.email, geminiEmail));

        if (result.length === 0) {
          return reply.status(404).send({ message: "User not found" });
        }

        const user = result[0];
        const message = await describeUserWithGemini(user);

        return reply.status(200).send({ message, user });
      } catch (error) {
        console.error("Get user by email via Gemini error:", error);
        return reply.status(500).send({ message: "Internal server error" });
      }
    }
  );
};
